type Query {
  book(id: String!): Book
  books(
    ids: [String!]!
    first: Int!
    after: String
    filter: BooksFilter
  ): BookEdges
  home: Home
  ownedBooks: OwnedBooks!
  auth: isAuthed
}

type OwnedBooks {
  books(first: Int!, after: String, filter: BooksFilter): BookEdges
}

type Home {
  books(first: Int!, after: String, filter: BooksFilter): BookEdges
}

type AuthPayload {
  token: String!
}

type SignUpPayload {
  token: String!
  alreadyExists: Boolean!
}

type SignOutPayload {
  success: Boolean!
}

type ContributeBook {
  alreadyExists: Boolean!
  success: Boolean!
}

type Mutation {
  signIn(username: String!, password: String!): AuthPayload!
  signUp(username: String!, password: String!): SignUpPayload!
  signOut: SignOutPayload!
  userOwned: UserOwned
  deleteUser(id: String!): SignOutPayload
  contributeBook(
    id: String!
    title: String!
    authors: [String!]!
    description: String!
    isEdit: Boolean
  ): ContributeBook
}

type UserOwned {
  isOwned(id: String!): Boolean!
  addToOwnedBooks(id: String!): OwnedBooksEditResponse
  removeFromOwnedBooks(id: String!): OwnedBooksEditResponse
}

type OwnedBooksEditResponse {
  success: Boolean!
}

type isAuthed {
  validity: Validity
  displayText: DisplayText
  allUsers: [User]
}

type User {
  username: String!
  isAdmin: Boolean!
}

input BooksFilter {
  titleText: String
}

type BookEdges {
  total: Int!
  edges: [BookNode]!
  hasNext: Boolean!
}

type BookNode {
  node: Book
  cursor: String!
}

type Book {
  id: String!
  title: String!
  authors: [String!]!
  description: String
  images: [String]
}
