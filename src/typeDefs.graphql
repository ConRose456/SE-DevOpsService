type Query {
  book(id: String!): Book
  books(
    ids: [String!]!
    first: Int!
    after: String
    filter: BooksFilter
  ): BookEdges
  auth: isAuthed
}

type AuthPayload {
  token: String!
}

type Mutation {
  signIn(username: String!, password: String!): AuthPayload!
}

type isAuthed {
  validity: Validity
  displayText: DisplayText
}

input BooksFilter {
  titleText: String
}

type BookEdges {
  total: Int!
  edges: [BookNode]!
  hasNext: Boolean!
}

type BookNode {
  node: Book
  cursor: String!
}

type Book {
  id: String!
  title: String!
  authors: [String!]!
  description: String
  images: [String]
}
